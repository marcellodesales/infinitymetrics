<?php

require 'infinitymetrics/orm/om/PersistentBaseChannel.php';


/**
 * Skeleton subclass for representing a row from the 'channel' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0 on:
 *
 * 11/29/08 10:55:52
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    infinitymetrics/orm
 */
class PersistentChannel extends PersistentBaseChannel {

	/**
	 * Initializes internal state of PersistentChannel object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}


    /**
     * Searches the collection of events and returns an array of Events within
     * the date range provided
     * @param <type> $startDate
     * @param <type> $endDate
     * @return <array_of_PersistentEvents>
     */
    public function getEventsByDate(DateTime $startDate, DateTime $endDate) {
        $filteredEventList = array();

        foreach ($this->getEvents() as $event)
        {
            if ($event->getDateObject() >= $startDate &&
                $event->getDateObject() <= $endDate)
            {
                array_push($filteredEventList, $event);
            }
        }

        return $filteredEventList;
    }

    /**
     * Searches the collection of Events and returns and array of Events matching
     * for the given User
     * @param <User> $user
     * @return <array_of_Events>
     */
    public function getEventsByUser($jnUsername) {
        $filteredEventList = array();

        foreach ($this->getEvents() as $event)
        {
            if ($event->getJnUsername() == $jnUsername) {
                array_push($filteredEventList, $event);
            }
        }

        return $filteredEventList;
    }


    public function setEvents(array $events) {
        $this->clearEvents();
        foreach ($events as $event) {
            $this->addEvent($event);
        }
    }

} // PersistentChannel
