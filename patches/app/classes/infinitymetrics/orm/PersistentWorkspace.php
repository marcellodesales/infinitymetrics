<?php

require_once 'infinitymetrics/orm/om/PersistentBaseWorkspace.php';
require_once 'infinitymetrics/orm/PersistentProjectPeer.php';
require_once 'infinitymetrics/orm/PersistentWorkspaceSharePeer.php';


/**
 * Skeleton subclass for representing a row from the 'workspace' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0 on:
 *
 * 11/18/08 13:07:33
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    infinitymetrics/orm
 */
class PersistentWorkspace extends PersistentBaseWorkspace {

	/**
	 * Initializes internal state of PersistentWorkspace object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}

    public function isShared() {
        $criteria = new Criteria();
        $criteria->add(PersistentWorkspaceSharePeer::WORKSPACE_ID, $this->getWorkspaceId());
        $numberShares = PersistentWorkspaceSharePeer::doCount($criteria);
        return $numberShares > 0;
    }

    public function getProjects() {
        $project = PersistentProjectPeer::retrieveByPK($this->getProjectJnName());
        
        if ($project->getParentProjectJnName() == "") {
            //project is a parent project on Java.net, as ppm is parent of ppm-1, ppm-2, ppm-3, etc.
            $criteria = new Criteria();
            $criteria->add(PersistentProjectPeer::PARENT_PROJECT_JN_NAME, $this->getProjectJnName());
            return PersistentProjectPeer::doSelect($criteria);
        } else {
            //this project has a parent. That means, the workspace is for a user, who is NOT a team member.
            return $project;
        }
    }

    public function isSharedWithUser($user_id) {
        if ( ! $this->isShared() ) {
            return false;
        } else {
            $criteria = new Criteria();
            $criteria->add(PersistentWorkspaceSharePeer::WORKSPACE_ID, $this->getWorkspaceId());
            $criteria->add(PersistentWorkspaceSharePeer::USER_ID, $user_id);
            //just count the number of shares. This is the case to be just 1 (a workspace can be shared with one
            //user just once.
            return PersistentWorkspaceSharePeer::doCount($criteria) == 0;
        }
    }

} // PersistentWorkspace
